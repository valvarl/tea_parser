// App.js
import React, { useCallback, useEffect, useState } from "react";
import axios from "axios";
import "./App.css";

// —Å—Ç—Ä–∞–Ω–∏—Ü—ã
import DashboardPage from "./components/DashboardPage";
import ScrapingPage from "./components/ScrapingPage";
import ProductsPage from "./components/ProductsPage";
import CollectionsPage from "./components/CollectionsPage";
import TasksPage from "./components/TasksPage";

// --- API instance ---
const BACKEND_URL = process.env.REACT_APP_BACKEND_URL || "";
const API = `${BACKEND_URL}/api/v1`;
const api = axios.create({ baseURL: API });

export default function App() {
  const [activeTab, setActiveTab] = useState("dashboard");

  // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è Products ‚Äî –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
  const [lastProductsQuery, setLastProductsQuery] = useState(null);

  // –ü–∏—à–µ–º –≤ URL —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ URL
  const [didInitFromUrl, setDidInitFromUrl] = useState(false);

  // ---- URL -> state (—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ tab)
  useEffect(() => {
    const sp = new URLSearchParams(window.location.search);
    const tab = sp.get("tab") || "dashboard";
    setActiveTab(tab);
    setDidInitFromUrl(true);
  }, []);

  // ---- state -> URL
  // –î–ª—è –≤–∫–ª–∞–¥–∫–∏ products: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ product-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∏–º–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç ProductsPage), –Ω–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º tab=products.
  // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫: –≤ URL –æ—Å—Ç–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û ?tab=...
  useEffect(() => {
    if (!didInitFromUrl) return;

    const cur = `${window.location.pathname}${window.location.search}`;
    let next = cur;

    if (activeTab === "products") {
      const sp = new URLSearchParams(window.location.search);
      sp.set("tab", "products");
      next = `${window.location.pathname}?${sp.toString()}`;
    } else {
      const sp = new URLSearchParams();
      sp.set("tab", activeTab);
      next = `${window.location.pathname}?${sp.toString()}`;
    }

    if (next !== cur) window.history.replaceState(null, "", next);
  }, [activeTab, didInitFromUrl]);

  // Deep-link –∏–∑ –∑–∞–¥–∞—á –≤–æ –≤–∫–ª–∞–¥–∫—É products ‚Äî —Å—Ä–∞–∑—É –∫–ª–∞–¥—ë–º –∫–ª—é—á–µ–≤—ã–µ product-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
  // –û—Å—Ç–∞–ª—å–Ω—ã–µ (limit/sort/q/filters) –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç ProductsPage –∏–∑ lastProductsQuery –∏–ª–∏ URL.
  const openProductsForTask = useCallback((taskId, scope = "task") => {
    setLastProductsQuery((prev) => ({
      ...(prev || {}),
      mode: "byTask",
      taskId,
      scope: scope === "pipeline" ? "pipeline" : "task",
      page: 1,
    }));
    setActiveTab("products");
  }, []);

  // –≠–∫—Å–ø–æ—Ä—Ç CSV –∏–∑ —à–∞–ø–∫–∏
  const exportCSV = useCallback(async () => {
    const res = await api.get("/export/csv");
    const rows = Array.isArray(res.data?.data) ? res.data.data : [];
    const header = "ID,Name,Price,Rating,Type,Region,Pressed,Scraped";
    const csvBody = rows
      .map((r) =>
        [
          r.id ?? "",
          r.name ?? "",
          r.price ?? "",
          r.rating ?? "",
          r.tea_type ?? "",
          r.tea_region ?? "",
          r.is_pressed ?? "",
          r.scraped_at ?? "",
        ]
          .map((v) => `"${String(v).replace(/"/g, '""')}"`)
          .join(","),
      )
      .join("\n");
    const blob = new Blob([`${header}\n${csvBody}`], { type: "text/csv;charset=utf-8" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "products.csv";
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  }, []);

  return (
    <div className="min-h-screen bg-gray-50">
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-3">
              <div className="text-2xl">üçÉ</div>
              <div>
                <h1 className="text-xl font-bold text-gray-900">Chinese Tea Parser</h1>
                <p className="text-sm text-gray-600">Ozon.ru ‚Ä¢ Data collection</p>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <button onClick={exportCSV} className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
                üì• Export CSV
              </button>
            </div>
          </div>
        </div>
      </header>

      <nav className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex space-x-8">
            {[
              { id: "dashboard", label: "Dashboard", icon: "üìä" },
              { id: "scraping", label: "Scraping", icon: "üîç" },
              { id: "products", label: "Products", icon: "üçÉ" },
              { id: "collections", label: "Collections", icon: "üß∫" },
              { id: "tasks", label: "Tasks", icon: "‚öôÔ∏è" },
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center space-x-2 py-4 px-2 border-b-2 font-medium text-sm ${
                  activeTab === tab.id
                    ? "border-blue-500 text-blue-600"
                    : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
                }`}>
                <span>{tab.icon}</span>
                <span>{tab.label}</span>
              </button>
            ))}
          </div>
        </div>
      </nav>

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {activeTab === "dashboard" && <DashboardPage api={api} onOpenProducts={openProductsForTask} />}

        {activeTab === "scraping" && <ScrapingPage api={api} />}

        {activeTab === "products" && (
          <ProductsPage
            api={api}
            // —Å—é–¥–∞ –ø–æ–ø–∞–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞—Ö–æ–¥–µ
            initialQuery={lastProductsQuery || undefined}
            // ProductsPage –±—É–¥–µ—Ç –∑–≤–∞—Ç—å —ç—Ç–æ –ø—Ä–∏ –ª—é–±–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤/—Å—Ç—Ä–∞–Ω–∏—Ü—ã/—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            onPersist={setLastProductsQuery}
          />
        )}

        {activeTab === "collections" && <CollectionsPage api={api} />}

        {activeTab === "tasks" && <TasksPage api={api} onOpenProducts={openProductsForTask} />}
      </main>
    </div>
  );
}
